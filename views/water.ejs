<% include ./partials/header.ejs %>
    <div class="w-full">
        <div class="w-full flex items-end justify-start gap-5 px-8 py-6">
            <img class="h-full w-1/6" src="/images/adobbe-logo 1.svg" alt="">
            <img class="h-3/5 w-1/3" src="/images/jal-vidyut-name 1.png" alt="">
        </div>
        <main class="px-9 text-3xl w-full py-5">
            <div class="flex flex-col gap-20 items-center justify-between w-full">
                <a href="/elec" class="w-2/12 flex h-[7vh] py-6 rounded-xl flex-col gap-6 items-center justify-between bg-blue-600 bg-opacity-90 shadow-2xl shadow-slate-500">
                    <img class="w-full h-full object-contain" src="/images/droplet-solid 1.svg" alt="">
                </a>
                <div class=" flex flex-col items-center justify-between rounded-2xl px-8 py-10 w-full h-[14vh] bg-neutral-100">
                    <div class="w-full">
                        <p class="text-5xl font-bold mb-5">Set a Goal</p>
                        <p class="font-semibold">Set a Goal to help manage your water consumption</p>
                    </div>
                    <button class="w-8/12 py-6 px-8 bg-green-400 rounded-full text-4xl shadow-2xl text-[#fffffff0] font-semibold shadow-slate-200">Set Goal</button>
                </div>
                <div class="text-4xl h-[52vh] w-full flex flex-col gap-4 items-start justify-between">
                    <p class="tracking-wide text-5xl font-bold">Daily Consumption</p>
                    <div class="h-[10%] w-full font-bold flex items-center justify-between px-8 text-5xl">
                        <i class="ri-arrow-left-s-line text-7xl"></i>
                        <p>Today</p>
                        <i class="ri-arrow-right-s-line text-7xl"></i>
                    </div>
                    <div class="h-5/6 flex items-end justify-center w-full ">
                        <canvas id="myChart" height="100%" width="100%" ></canvas>
                    </div>
                </div>
            </div>
        </main> 
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let array = [5,4.7]; 
        // Get the canvas element
        var ctx = document.getElementById('myChart').getContext('2d');

        // Define your data with an empty array
        var data = {
            labels: [0,1,2,3],
            datasets: [{
                data: array,
                backgroundColor: '#4169E1',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 5,
            }]
        };

        // Create a new chart
        var myChart = new Chart(ctx, {
            type: 'line', // Specify the type of chart (e.g., bar, line, pie)
            data: data,
            options: {
                scales: {
                    y: {
                        position: "right",
                        ticks: {
                            callback: function (value, index, values) {
                                var yLabels = ['0L', '200L', '400L', '600L', '800L', '1000L'];
                                return yLabels[index];
                            },
                            stepSize: 1,
                            font: {
                                size: 32,
                                weight: 'bold'
                            },
                        },
                        max: 5,
                        min: 0,
                    },
                    x: {
                        ticks: {
                            font: {
                                size: 32,
                                weight: 'bold'
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false,
                    },
                    tooltip: {
                        displayColors: true,
                        bodyFont:{
                            size : 20   
                        } , // Adjust the font size of the tooltip body
                        titleFont:{
                            size: 24
                        }, // Adjust the font size of the tooltip title
                        callbacks: {
                            label: function(context) {
                                return 'Value: ' + context.dataset.data[context.dataIndex];
                                }
                            }
                    }
                },
            }
        });

        function updateChartData(newDataValues) {
            myChart.data.datasets[0].data = newDataValues;
            myChart.update(); // Update the chart to reflect the changes
        }

        var interval = setInterval(() => {
            var currentLabels = myChart.data.labels;
            const previousElement = array[array.length - 1];
            const newElement = generateNewElement(previousElement);

            if (previousElement < 0.5) {
                array = [5,4.9];
                myChart.data.labels = [0,1,2,3,4,5];
                myChart.update();
            } else {
                
                array.push(newElement);

                if (array.length > 3) {
                    updateChartData(array);
                    currentLabels.push(currentLabels[currentLabels.length - 1] + 1)
                }
            }
        }, 1500);

        function generateNewElement(previousElement) {
            const maxDifference = Math.random(Math.floor()*1)*1;
            // Generate a random number between 0 and maxDifference
            const difference = Math.random() * maxDifference;

            // Calculate the new element
            const newElement = previousElement - difference;

            return newElement;
        }
    </script>
    
<% include ./partials/footer.ejs %>